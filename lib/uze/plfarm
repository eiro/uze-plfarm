# vim: sw=4

: << '=cut'

=head1 NAME

PLFARM (for Perl Farming) is an attempt to create a simple tool to manage
a large set of instances of a single application with multiple versions and
large range of settings.

Instances can be created, enabled, disabled, cloned, archived, deleted.

The "crash test dummy" of of PLFARM was L<RT|https://www.bestpractical.com/>
(based on a previous successfull experience with L<koha|http://koha-ils.org>).

=head1 INSTALLATION 

=over

=item *

ST_*  relatif au site utilisé par l'instance

=item *

RT_*  ???? c'est quoi déjà ?

=head1 fonctions de gestion des instances RT

=head2 dist/

=head3 install $version

télécharge et décompresse le tarball de la version $version de RT dans le store

=head1 FUNCTIONS

=cut

dist/install () {

    setopt localoptions xtrace
    local version=${1?version number required}
    local base=rt-$version
    local dest=$RTFARM_DIST/$base

    [[ -d $dest ]] && {
	warn "already installed in $dest"
	return
    }

    local url="http://download.bestpractical.com/pub/rt/release/rt-$version.tar.gz"
    warn "downloading $url"

    ( cd $RTFARM_DIST &&
	curl -L $url | gzip -d | tar xf -
	mv rt-$version $version )

}

site/set/all () {
    site/set/defaults
    site/set/perl5lib
}

site/set/defaults () {
    site/set/credentials DB_USER DB_PASS
    . $RTFARM_ROOT/etc/defaults/site
}


site/set/credentials () { { read $1; read $2 } <  ~/.credentials }
site/set/perl5lib () {
    # prepend site libs
    perl5lib=(
        $ST_ROOT/perl5
        $ST_ROOT/lib
        $perl5lib
    )
    # then uniq them
    perl5lib=( ${(u)perl5lib} )
}

site/mk-nginx () {
    (( $# )) && site/go $1
    (( $+ST_NAME )) || die "no site loaded"
    m4 nginx > $RTFARM_ROOT/etc/nginx/$ST_NAME
}

site/enable ()  { ln -s ~/site/$1/rc/nginx ~/nginx/$1 }
site/disable () { rm ~/nginx/$1 }

site/install () {
    setopt localoptions errreturn
    . ./$1
    mkdir -p $ST_ROOT
    cp $1 $ST_ROOT/env
    cd $RT_ROOT
    ./configure $configure_options
    make install
}

site/source () { source ~rt/site/${1:?site name expected}/env }
site/cd     () { cd ~rt/site/${1:?site name expected} }
site/go     () { cd ~rt/site/${1:?site name expected}; source env }

site/fcgi () {
	site/go $1;
	site/fcgi/spawn $1
}

site/fcgi/spawn () {
	spawn-fcgi -M770 -g www-data -n -s /tmp/rt.$1.sock -- $PWD/sbin/rt-server.fcgi
}

site/fcgi/safe/start () {
	touch command/respawn
	site/fcgi/spawn $1
	while [[ -f command/respawn ]] {
		perl sbin/rt-serializer --directory crash.$( date +%F%T )
		site/fcgi/spawn $1
	}
}

site/fcgi/safe/start () {
	touch command/respawn
	site/fcgi/spawn $1
	while [[ -f command/respawn ]] {
		perl sbin/rt-serializer --directory crash.$( date +%F%T )
		site/fcgi/spawn $1
	}
}

site/http () { site/go $1; perl sbin/rt-server "$@" }

# site/mail/aliases/etc | sudo sh -c 'cat > /etc/aliases'

site/mail/mk-aliases () {
    warn "mk-aliases is depreacted, use site/aliases/etc instead"
}

site/mail/aliases/tada  () { print "tadaaaa" }
site/mail/aliases/m4  () { M4PATH=~/scripts/m4/aliases:~/postfix m4 "$@" }
site/mail/aliases/gen () { site/mail/aliases/m4 gen "$@" }
site/mail/aliases/announce () { site/mail/aliases/gen announce "$@" }
site/mail/aliases/etc () {
    cat /etc/aliases.local
    site/mail/aliases/gen ~/postfix/*(:t)
}

site/db () { sbin/rt-setup-database --action "$@" }

rproc ()  { ps -Urt hopid,command }

# BUG: /home/rt/site must rely on a variable!!

rproc/.f/fcgis () {
    sed -rn \
    's#^(\d+) /usr/bin/perl -w /home/rt/site/([^/]+)/sbin/rt-server.fcgi#\1 \2#p'
}

rproc/.f/fcgi/pidof () {
    sed -rn \
    's#^(\d+) /usr/bin/perl -w /home/rt/site/'"$1"'/sbin/rt-server.fcgi#\1#;T;p;q'
}

function () {
    eval rproc/$1' () { rproc | rproc/.f/'$1' "$@" }'
} fcgis fcgi/pidof


site/loaded () { (( $+ST_NAME )) || warn "no loaded site" }

: << '=cut'

=head2 Site Bundle functions

Bundles are migration tarballs for site migrations

from your brand new server

    site/go this.example.com
    ssh oldserver zsh '
        site/go this.example.com
        site/bundle/tar -
    ' site/bundle/load -

in the future

    site/clone oldserver this.example.com

=head3 site/bundle/prepare

prepare a directory named 

    /tmp/rt4.export.$ST_NAME.$(date +%F-%H-%M )

with required files for site migration. 

then ouputs its path. 

=head3 site/bundle/tar $name

tarball the result of site/bundle/prepare in C<$name>
(default is C</tmp/rt4.export.$ST_NAME.$(date +%F-%H-%M )>).

if C<$name> is C<->, the tarball is streamed to stdout.

=head3 site/bundle/load

=cut

site/bundle/prepare () {
    setopt localoptions errreturn
    site/loaded
    local dest=/tmp/rt4.export.$ST_NAME.$(date +%F-%H-%M )
    [[ -d $dest ]] && die "more than once a minute ... you kidding me ?"
    mkdir -p $dest
    cp etc/RT_SiteConfig.pm $dest
    ./sbin/rt-serializer -d $dest/data "$@"
    print $dest
} 

site/bundle/stream () {
    setopt localoptions errreturn
    local abs=${1:-$( site/bundle/prepare )} 
    # TODO: ask jean!
    # tar -C $abs cf - 
    ( cd $abs; tar cf - * )
}

site/bundle/tgz () {
    setopt localoptions errreturn
    local abs=${1:-$( site/bundle/prepare )}
    local rel=${abs##*/}
    loacl archive=${2:-$rel.tgz}
    ( cd $abs/..
        tar czf $archive $rel
        print $archive )
}
